name: Build

on:
  pull_request:
    branches:
      - 'v1-stable'

jobs:
  # Check
  check:
    name: Ensure Latest
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check if branch is ahead of v1-stable
        run: |
          if ! git merge-base --is-ancestor origin/v1-stable ${{ github.event.pull_request.head.sha }};
          then echo "This branch is not up to date with v1-stable. Skipping build to save resources.";
          exit 1; fi
          


  # Frontend
  build-frontend:
    name: Build Frontend
    needs: check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/amrc-factoryplus/acs-manager

      - name: Build & Push Frontend
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: ./.docker/Dockerfiles/frontend/Dockerfile.frontend
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}

# Backend
  build-backend:
    name: Build Backend
    needs: check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/amrc-factoryplus/acs-manager

      - name: Check backend build
        id: check-backend-build
        run: |
          docker manifest inspect ghcr.io/amrc-factoryplus/acs-manager:backend-build-1.0.0 || echo "needs-build=true" >> $GITHUB_OUTPUT

      - name: Build Backend Builder
        id: build-backend-build
        if: steps.check-backend-build.outputs.needs-build == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./.docker/Dockerfiles/backend/Dockerfile.backend-build
          push: true
          tags: ghcr.io/amrc-factoryplus/acs-manager:backend-build-1.0.0

      - name: Check base
        id: check-base
        run: |          
          docker manifest inspect ghcr.io/amrc-factoryplus/acs-manager:prod-base-php82-1.0.4 || echo "needs-build=true" >> $GITHUB_OUTPUT

      - name: Build Backend Base
        id: build-base
        if: steps.check-base.outputs.needs-build == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./.docker/Dockerfiles/backend/Dockerfile.backend-base
          push: true
          tags: ghcr.io/amrc-factoryplus/acs-manager:prod-base-php82-1.0.4

      - name: Build Backend
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./.docker/Dockerfiles/backend/Dockerfile.backend
          load: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload Backend
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.number }}
          path: /tmp/image.tar
  push-backend:
    name: Push Backend
    runs-on: ubuntu-latest
    needs: build-backend
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/amrc-factoryplus/acs-manager

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.number }}
          path: /tmp

      - name: Load and push image
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a
          docker push ${{ steps.meta.outputs.tags }}-backend
